name: Build arter97 Kernel (master & kernelsu)

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release with kernel images'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build Kernels (master & kernelsu)
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    strategy:
      matrix:
        branch: [master, kernelsu]

    steps:
    - name: Checkout ${{ matrix.branch }} branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}
        fetch-depth: 1

    - name: Setup Build Environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential bc bison flex libssl-dev libelf-dev \
          fakeroot cpio lz4 python3-pip git wget \
          device-tree-compiler clang llvm lld ccache
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Download mkbootimg.py from AOSP
      run: |
        mkdir -p ~/.local/bin
        wget -O ~/.local/bin/mkbootimg.py https://android.googlesource.com/platform/system/tools/mkbootimg/+/refs/heads/master/mkbootimg.py?format=TEXT
        base64 -d ~/.local/bin/mkbootimg.py > ~/.local/bin/mkbootimg.tmp && mv ~/.local/bin/mkbootimg.tmp ~/.local/bin/mkbootimg.py
        chmod +x ~/.local/bin/mkbootimg.py

    - name: Patch Makefile toolchain paths
      run: |
        sed -i 's|/home/arter97/android/nathan/llvm-20.1.4-x86_64/bin/|/usr/bin/|g' Makefile
        sed -i 's|/home/arter97/arm64-gcc/bin/aarch64-elf-|aarch64-linux-gnu-|g' Makefile
        sed -i 's|/home/arter97/arm32-gcc/bin/arm-eabi-|arm-linux-gnueabihf-|g' Makefile

    - name: Verify Essential Files
      run: |
        test -f build_kernel.sh || { echo "❌ build_kernel.sh not found"; exit 1; }
        test -d ramdisk || { echo "❌ ramdisk directory not found"; exit 1; }
        test -f defconfig || { echo "❌ defconfig not found"; exit 1; }
        test -f version || { echo "❌ version file not found"; exit 1; }
        which mkbootimg.py || { echo "❌ mkbootimg.py not found"; exit 1; }
        echo "✅ All essential files verified"

    - name: Build Kernel
      run: |
        chmod +x build_kernel.sh
        chmod +x ramdisk_fix_permissions.sh 2>/dev/null || true

        export CC="clang"
        export LD="ld.lld"
        export AR="llvm-ar"
        export NM="llvm-nm"
        export OBJCOPY="llvm-objcopy"
        export OBJDUMP="llvm-objdump"
        export STRIP="llvm-strip"
        export ARCH=arm64
        export CROSS_COMPILE="aarch64-linux-gnu-"
        export CROSS_COMPILE_ARM32="arm-linux-gnueabihf-"
        export CLANG_TRIPLE="aarch64-linux-gnu-"
        export LLVM=1
        export LLVM_IAS=1

        ./build_kernel.sh

    - name: Upload Kernel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-artifacts-${{ matrix.branch }}-${{ github.run_number }}
        path: |
          arter97-kernel-*-boot.img
          arter97-kernel-*-kernelsu-boot.img
          boot.img
      if: always()

  release:
    name: Create Combined Release
    needs: build
    runs-on: ubuntu-24.04
    if: ${{ github.event.inputs.create_release == 'true' }}
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Set current date as env variable
      id: set_date
      run: echo "BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Find artifact filenames
      id: find_artifacts
      run: |
        STD_KERNEL=$(find artifacts -name "arter97-kernel-*-boot.img" ! -name "*kernelsu*" | head -n1)
        KSU_KERNEL=$(find artifacts -name "arter97-kernel-*-kernelsu-boot.img" | head -n1)
        echo "STD_KERNEL=$STD_KERNEL" >> $GITHUB_ENV
        echo "KSU_KERNEL=$KSU_KERNEL" >> $GITHUB_ENV
        echo "STD_KERNEL_NAME=$(basename "$STD_KERNEL")" >> $GITHUB_ENV
        echo "KSU_KERNEL_NAME=$(basename "$KSU_KERNEL")" >> $GITHUB_ENV

    - name: Prepare release notes
      run: |
        echo "## arter97 Kernel Build" > release_notes.md
        if [ -n "${STD_KERNEL_NAME}" ]; then
          echo "- **Standard Kernel:** [Download here](https://github.com/${{ github.repository }}/releases/download/kernel-build-${{ github.run_number }}/${STD_KERNEL_NAME})" >> release_notes.md
        fi
        if [ -n "${KSU_KERNEL_NAME}" ]; then
          echo "- **Kernel with KernelSU:** [Download here](https://github.com/${{ github.repository }}/releases/download/kernel-build-${{ github.run_number }}/${KSU_KERNEL_NAME})" >> release_notes.md
        fi
        echo "" >> release_notes.md
        echo "### Build Information" >> release_notes.md
        echo "- Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        echo "- Run number: ${{ github.run_number }}" >> release_notes.md
      env:
        STD_KERNEL_NAME: ${{ env.STD_KERNEL_NAME }}
        KSU_KERNEL_NAME: ${{ env.KSU_KERNEL_NAME }}

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: kernel-build-${{ github.run_number }}
        name: arter97 Kernel Build ${{ github.run_number }}
        body_path: release_notes.md
        files: |
          artifacts/**/arter97-kernel-*-boot.img
          artifacts/**/arter97-kernel-*-kernelsu-boot.img
          artifacts/**/boot.img
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
